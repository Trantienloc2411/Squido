@using SharedViewModal.ViewModels
@model PaginationHelperModel

@{
    var baseUrl = Url.Action(Model.Action, Model.Controller);
    var queryParams = new List<string>();
    
    if (!string.IsNullOrEmpty(Model.Keyword))
    {
        queryParams.Add($"keyword={Model.Keyword}");
    }
    
    if (Model.Categories != null && Model.Categories.Any())
    {
        // This approach generates multiple "categories=X" parameters in the URL
        // which is correctly handled by ASP.NET model binding for List<int>
        queryParams.AddRange(Model.Categories.Select(c => $"categories={c}"));
    }
    
    string BuildPageUrl(int page)
    {
        var allParams = queryParams.ToList(); // Create a copy to avoid modifying the original
        allParams.Add($"currentPage={page}");
        return $"{baseUrl}?{string.Join("&", allParams)}";
    }
}

<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        @if (Model.CurrentPage > 1)
        {
            <li class="page-item">
                <a class="page-link" href="@BuildPageUrl(Model.CurrentPage - 1)">Previous</a>
            </li>
        }
        else
        {
            <li class="page-item disabled">
                <span class="page-link">Previous</span>
            </li>
        }

        @for (int i = 1; i <= Model.PageCount; i++)
        {
            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                <a class="page-link" href="@BuildPageUrl(i)">@i</a>
            </li>
        }

        @if (Model.CurrentPage < Model.PageCount)
        {
            <li class="page-item">
                <a class="page-link" href="@BuildPageUrl(Model.CurrentPage + 1)">Next</a>
            </li>
        }
        else
        {
            <li class="page-item disabled">
                <span class="page-link">Next</span>
            </li>
        }
    </ul>
</nav>